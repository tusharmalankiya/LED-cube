
LED-cube-atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  000009ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000375  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000013b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014d  00000000  00000000  00001766  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  7a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <reset_pins>:
#define COLUMN_LAST_PIN_MASK 0x01


void reset_pins(){
	//set layer pins off
	LAYER_PORT = 0b00000000;
  82:	1b ba       	out	0x1b, r1	; 27
	
	//set column pins on
	COLUMN_PORT = 0b11111111;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	88 bb       	out	0x18, r24	; 24
	ColUMN_LAST_PIN_PORT = 0b00000001;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	08 95       	ret

0000008e <initLEDs>:
	
}

// Function to initialize the LED cube pins
void initLEDs() {
	LAYER_DDR = LAYER_MASK; // Set layer pins as output
  8e:	87 e0       	ldi	r24, 0x07	; 7
  90:	8a bb       	out	0x1a, r24	; 26
	
	COLUMN_DDR = COLUMN_MASK; // Set column pins as output
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	ColUMN_LAST_PIN_DDR = COLUMN_LAST_PIN_MASK; // set 9th column pin as output
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	84 bb       	out	0x14, r24	; 20
	
	reset_pins();
  9a:	0e 94 41 00 	call	0x82	; 0x82 <reset_pins>
  9e:	08 95       	ret

000000a0 <displayLayer>:
	{0b10000000, 0b00000000, 0b11111111}, // Layer 2: All LEDs off
};

// Function to display a layer pattern
void displayLayer(uint8_t layer) {
	LAYER_PORT = (LAYER_PORT & ~LAYER_MASK) | (1 << layer); // Select the layer
  a0:	9b b3       	in	r25, 0x1b	; 27
  a2:	48 2f       	mov	r20, r24
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	08 2e       	mov	r0, r24
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <displayLayer+0x12>
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <displayLayer+0xe>
  b6:	98 7f       	andi	r25, 0xF8	; 248
  b8:	29 2b       	or	r18, r25
  ba:	2b bb       	out	0x1b, r18	; 27
	
	// Output the pattern for the selected layer
	for (int i = 0; i < 3; i++) {
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	28 c0       	rjmp	.+80     	; 0x112 <displayLayer+0x72>
		if(i == 2 && layer == 2){
  c2:	22 30       	cpi	r18, 0x02	; 2
  c4:	31 05       	cpc	r19, r1
  c6:	79 f4       	brne	.+30     	; 0xe6 <displayLayer+0x46>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	69 f4       	brne	.+26     	; 0xe6 <displayLayer+0x46>
			ColUMN_LAST_PIN_PORT &= ~(1 << PINC0);
  cc:	95 b3       	in	r25, 0x15	; 21
  ce:	9e 7f       	andi	r25, 0xFE	; 254
  d0:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	6f ef       	ldi	r22, 0xFF	; 255
  d4:	71 ee       	ldi	r23, 0xE1	; 225
  d6:	94 e0       	ldi	r25, 0x04	; 4
  d8:	61 50       	subi	r22, 0x01	; 1
  da:	70 40       	sbci	r23, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <displayLayer+0x38>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <displayLayer+0x42>
  e2:	00 00       	nop
			_delay_ms(100);
			continue;
  e4:	14 c0       	rjmp	.+40     	; 0x10e <displayLayer+0x6e>
		}
		COLUMN_PORT = patterns[layer][i];
  e6:	fa 01       	movw	r30, r20
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e4 0f       	add	r30, r20
  ee:	f5 1f       	adc	r31, r21
  f0:	e0 5a       	subi	r30, 0xA0	; 160
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	e2 0f       	add	r30, r18
  f6:	f3 1f       	adc	r31, r19
  f8:	90 81       	ld	r25, Z
  fa:	98 bb       	out	0x18, r25	; 24
  fc:	6f ef       	ldi	r22, 0xFF	; 255
  fe:	71 ee       	ldi	r23, 0xE1	; 225
 100:	94 e0       	ldi	r25, 0x04	; 4
 102:	61 50       	subi	r22, 0x01	; 1
 104:	70 40       	sbci	r23, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <displayLayer+0x62>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <displayLayer+0x6c>
 10c:	00 00       	nop
// Function to display a layer pattern
void displayLayer(uint8_t layer) {
	LAYER_PORT = (LAYER_PORT & ~LAYER_MASK) | (1 << layer); // Select the layer
	
	// Output the pattern for the selected layer
	for (int i = 0; i < 3; i++) {
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	23 30       	cpi	r18, 0x03	; 3
 114:	31 05       	cpc	r19, r1
 116:	ac f2       	brlt	.-86     	; 0xc2 <displayLayer+0x22>
			continue;
		}
		COLUMN_PORT = patterns[layer][i];
		_delay_ms(100); // Adjust the delay as needed for brightness
	}
}
 118:	08 95       	ret

0000011a <pattern1>:

void pattern1(){
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
	for (int layer = 0; layer < 3; layer++) {
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	0a c0       	rjmp	.+20     	; 0x138 <pattern1+0x1e>
		displayLayer(layer);
 124:	8c 2f       	mov	r24, r28
 126:	0e 94 50 00 	call	0xa0	; 0xa0 <displayLayer>
 12a:	8f e9       	ldi	r24, 0x9F	; 159
 12c:	9f e0       	ldi	r25, 0x0F	; 15
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <pattern1+0x14>
 132:	00 c0       	rjmp	.+0      	; 0x134 <pattern1+0x1a>
 134:	00 00       	nop
		_delay_ms(100); // Adjust the delay as needed for brightness
	}
}

void pattern1(){
	for (int layer = 0; layer < 3; layer++) {
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	c3 30       	cpi	r28, 0x03	; 3
 13a:	d1 05       	cpc	r29, r1
 13c:	9c f3       	brlt	.-26     	; 0x124 <pattern1+0xa>
		displayLayer(layer);
		_delay_ms(1); // Adjust the delay to control animation speed
	}
	reset_pins();
 13e:	0e 94 41 00 	call	0x82	; 0x82 <reset_pins>

}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <main>:
#include <util/delay.h>



int main(void) {
	initLEDs(); // Initialize LED pins
 148:	0e 94 47 00 	call	0x8e	; 0x8e <initLEDs>
	
	while (1) {
		// Display each layer in sequence to create animation
		pattern1();
 14c:	0e 94 8d 00 	call	0x11a	; 0x11a <pattern1>
 150:	fd cf       	rjmp	.-6      	; 0x14c <main+0x4>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
