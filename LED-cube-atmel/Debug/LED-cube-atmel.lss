
LED-cube-atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000270  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf1  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  00000fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064f  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f4  00000000  00000000  000020eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000026df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  7a:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <reset_pins>:
			COLUMN_PORT = patterns3[j][i];
			_delay_ms(200); // Adjust the delay as needed for brightness
		}
		_delay_ms(1); // Adjust the delay to control animation speed
	}
	reset_pins();
  82:	1b ba       	out	0x1b, r1	; 27
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	88 bb       	out	0x18, r24	; 24
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	08 95       	ret

0000008e <initLEDs>:
  8e:	87 e0       	ldi	r24, 0x07	; 7
  90:	8a bb       	out	0x1a, r24	; 26
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	84 bb       	out	0x14, r24	; 20
  9a:	0e 94 41 00 	call	0x82	; 0x82 <reset_pins>
  9e:	08 95       	ret

000000a0 <pattern1_blink>:
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	3b c0       	rjmp	.+118    	; 0x11c <pattern1_blink+0x7c>
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2b c0       	rjmp	.+86     	; 0x106 <pattern1_blink+0x66>
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	91 05       	cpc	r25, r1
  b4:	99 f4       	brne	.+38     	; 0xdc <pattern1_blink+0x3c>
  b6:	22 30       	cpi	r18, 0x02	; 2
  b8:	31 05       	cpc	r19, r1
  ba:	81 f4       	brne	.+32     	; 0xdc <pattern1_blink+0x3c>
  bc:	45 b3       	in	r20, 0x15	; 21
  be:	4e 7f       	andi	r20, 0xFE	; 254
  c0:	45 bb       	out	0x15, r20	; 21
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	53 ec       	ldi	r21, 0xC3	; 195
  c6:	69 e0       	ldi	r22, 0x09	; 9
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	50 40       	sbci	r21, 0x00	; 0
  cc:	60 40       	sbci	r22, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <pattern1_blink+0x28>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <pattern1_blink+0x32>
  d2:	00 00       	nop
  d4:	45 b3       	in	r20, 0x15	; 21
  d6:	41 60       	ori	r20, 0x01	; 1
  d8:	45 bb       	out	0x15, r20	; 21
  da:	14 c0       	rjmp	.+40     	; 0x104 <pattern1_blink+0x64>
  dc:	f9 01       	movw	r30, r18
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	e2 0f       	add	r30, r18
  e4:	f3 1f       	adc	r31, r19
  e6:	ee 58       	subi	r30, 0x8E	; 142
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	e8 0f       	add	r30, r24
  ec:	f9 1f       	adc	r31, r25
  ee:	40 81       	ld	r20, Z
  f0:	48 bb       	out	0x18, r20	; 24
  f2:	4f ef       	ldi	r20, 0xFF	; 255
  f4:	53 ec       	ldi	r21, 0xC3	; 195
  f6:	69 e0       	ldi	r22, 0x09	; 9
  f8:	41 50       	subi	r20, 0x01	; 1
  fa:	50 40       	sbci	r21, 0x00	; 0
  fc:	60 40       	sbci	r22, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <pattern1_blink+0x58>
 100:	00 c0       	rjmp	.+0      	; 0x102 <pattern1_blink+0x62>
 102:	00 00       	nop
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	91 05       	cpc	r25, r1
 10a:	94 f2       	brlt	.-92     	; 0xb0 <pattern1_blink+0x10>
 10c:	8f e9       	ldi	r24, 0x9F	; 159
 10e:	9f e0       	ldi	r25, 0x0F	; 15
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <pattern1_blink+0x70>
 114:	00 c0       	rjmp	.+0      	; 0x116 <pattern1_blink+0x76>
 116:	00 00       	nop
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	23 30       	cpi	r18, 0x03	; 3
 11e:	31 05       	cpc	r19, r1
 120:	14 f2       	brlt	.-124    	; 0xa6 <pattern1_blink+0x6>
 122:	0e 94 41 00 	call	0x82	; 0x82 <reset_pins>
 126:	08 95       	ret

00000128 <displayPattern2Layer>:
 128:	9b b3       	in	r25, 0x1b	; 27
 12a:	48 2f       	mov	r20, r24
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	08 2e       	mov	r0, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <displayPattern2Layer+0x12>
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <displayPattern2Layer+0xe>
 13e:	98 6f       	ori	r25, 0xF8	; 248
 140:	29 2b       	or	r18, r25
 142:	2b bb       	out	0x1b, r18	; 27
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	9b bb       	out	0x1b, r25	; 27
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	28 c0       	rjmp	.+80     	; 0x19e <displayPattern2Layer+0x76>
 14e:	22 30       	cpi	r18, 0x02	; 2
 150:	31 05       	cpc	r19, r1
 152:	79 f4       	brne	.+30     	; 0x172 <displayPattern2Layer+0x4a>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	69 f4       	brne	.+26     	; 0x172 <displayPattern2Layer+0x4a>
 158:	95 b3       	in	r25, 0x15	; 21
 15a:	9e 7f       	andi	r25, 0xFE	; 254
 15c:	95 bb       	out	0x15, r25	; 21
 15e:	6f ef       	ldi	r22, 0xFF	; 255
 160:	73 ec       	ldi	r23, 0xC3	; 195
 162:	99 e0       	ldi	r25, 0x09	; 9
 164:	61 50       	subi	r22, 0x01	; 1
 166:	70 40       	sbci	r23, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <displayPattern2Layer+0x3c>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <displayPattern2Layer+0x46>
 16e:	00 00       	nop
 170:	14 c0       	rjmp	.+40     	; 0x19a <displayPattern2Layer+0x72>
 172:	fa 01       	movw	r30, r20
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	e4 0f       	add	r30, r20
 17a:	f5 1f       	adc	r31, r21
 17c:	e7 59       	subi	r30, 0x97	; 151
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	e2 0f       	add	r30, r18
 182:	f3 1f       	adc	r31, r19
 184:	90 81       	ld	r25, Z
 186:	98 bb       	out	0x18, r25	; 24
 188:	6f ef       	ldi	r22, 0xFF	; 255
 18a:	73 ec       	ldi	r23, 0xC3	; 195
 18c:	99 e0       	ldi	r25, 0x09	; 9
 18e:	61 50       	subi	r22, 0x01	; 1
 190:	70 40       	sbci	r23, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <displayPattern2Layer+0x66>
 196:	00 c0       	rjmp	.+0      	; 0x198 <displayPattern2Layer+0x70>
 198:	00 00       	nop
 19a:	2f 5f       	subi	r18, 0xFF	; 255
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	23 30       	cpi	r18, 0x03	; 3
 1a0:	31 05       	cpc	r19, r1
 1a2:	ac f2       	brlt	.-86     	; 0x14e <displayPattern2Layer+0x26>
 1a4:	08 95       	ret

000001a6 <pattern2>:
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <pattern2+0x1e>
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 94 00 	call	0x128	; 0x128 <displayPattern2Layer>
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	9f e0       	ldi	r25, 0x0F	; 15
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <pattern2+0x14>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <pattern2+0x1a>
 1c0:	00 00       	nop
 1c2:	21 96       	adiw	r28, 0x01	; 1
 1c4:	c3 30       	cpi	r28, 0x03	; 3
 1c6:	d1 05       	cpc	r29, r1
 1c8:	9c f3       	brlt	.-26     	; 0x1b0 <pattern2+0xa>
 1ca:	0e 94 41 00 	call	0x82	; 0x82 <reset_pins>
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <pattern3_blink>:

}

void pattern3_blink(){
	for (int j = 0; j < 3; j++) {
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	3a c0       	rjmp	.+116    	; 0x24e <pattern3_blink+0x7a>
		LAYER_PORT = 0b00000111;
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	8b bb       	out	0x1b, r24	; 27
		// Output the pattern for the selected layer
		for (int i = 0; i < 3; i++) {
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	2a c0       	rjmp	.+84     	; 0x238 <pattern3_blink+0x64>
			if(i == 0 && j == 0){
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	99 f4       	brne	.+38     	; 0x20e <pattern3_blink+0x3a>
 1e8:	21 15       	cp	r18, r1
 1ea:	31 05       	cpc	r19, r1
 1ec:	81 f4       	brne	.+32     	; 0x20e <pattern3_blink+0x3a>
				ColUMN_LAST_PIN_PORT &= ~(1 << PINC0);
 1ee:	45 b3       	in	r20, 0x15	; 21
 1f0:	4e 7f       	andi	r20, 0xFE	; 254
 1f2:	45 bb       	out	0x15, r20	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	4f ef       	ldi	r20, 0xFF	; 255
 1f6:	53 ec       	ldi	r21, 0xC3	; 195
 1f8:	69 e0       	ldi	r22, 0x09	; 9
 1fa:	41 50       	subi	r20, 0x01	; 1
 1fc:	50 40       	sbci	r21, 0x00	; 0
 1fe:	60 40       	sbci	r22, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <pattern3_blink+0x26>
 202:	00 c0       	rjmp	.+0      	; 0x204 <pattern3_blink+0x30>
 204:	00 00       	nop
				_delay_ms(200);
				ColUMN_LAST_PIN_PORT |= (1 << PINC0);
 206:	45 b3       	in	r20, 0x15	; 21
 208:	41 60       	ori	r20, 0x01	; 1
 20a:	45 bb       	out	0x15, r20	; 21
				continue;
 20c:	14 c0       	rjmp	.+40     	; 0x236 <pattern3_blink+0x62>
			}
			COLUMN_PORT = patterns3_blink[j][i];
 20e:	f9 01       	movw	r30, r18
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	e2 0f       	add	r30, r18
 216:	f3 1f       	adc	r31, r19
 218:	e0 5a       	subi	r30, 0xA0	; 160
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	e8 0f       	add	r30, r24
 21e:	f9 1f       	adc	r31, r25
 220:	40 81       	ld	r20, Z
 222:	48 bb       	out	0x18, r20	; 24
 224:	4f ef       	ldi	r20, 0xFF	; 255
 226:	53 ec       	ldi	r21, 0xC3	; 195
 228:	69 e0       	ldi	r22, 0x09	; 9
 22a:	41 50       	subi	r20, 0x01	; 1
 22c:	50 40       	sbci	r21, 0x00	; 0
 22e:	60 40       	sbci	r22, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <pattern3_blink+0x56>
 232:	00 c0       	rjmp	.+0      	; 0x234 <pattern3_blink+0x60>
 234:	00 00       	nop

void pattern3_blink(){
	for (int j = 0; j < 3; j++) {
		LAYER_PORT = 0b00000111;
		// Output the pattern for the selected layer
		for (int i = 0; i < 3; i++) {
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	91 05       	cpc	r25, r1
 23c:	9c f2       	brlt	.-90     	; 0x1e4 <pattern3_blink+0x10>
 23e:	8f e9       	ldi	r24, 0x9F	; 159
 240:	9f e0       	ldi	r25, 0x0F	; 15
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <pattern3_blink+0x6e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <pattern3_blink+0x74>
 248:	00 00       	nop
	reset_pins();

}

void pattern3_blink(){
	for (int j = 0; j < 3; j++) {
 24a:	2f 5f       	subi	r18, 0xFF	; 255
 24c:	3f 4f       	sbci	r19, 0xFF	; 255
 24e:	23 30       	cpi	r18, 0x03	; 3
 250:	31 05       	cpc	r19, r1
 252:	1c f2       	brlt	.-122    	; 0x1da <pattern3_blink+0x6>
			COLUMN_PORT = patterns3_blink[j][i];
			_delay_ms(200); // Adjust the delay as needed for brightness
		}
		_delay_ms(1); // Adjust the delay to control animation speed
	}
	reset_pins();
 254:	0e 94 41 00 	call	0x82	; 0x82 <reset_pins>
 258:	08 95       	ret

0000025a <main>:
#include <util/delay.h>



int main(void) {
	initLEDs(); // Initialize LED pins
 25a:	0e 94 47 00 	call	0x8e	; 0x8e <initLEDs>
	
	
	while (1) {
		// Display each layer in sequence to create animation
		pattern1_blink();
 25e:	0e 94 50 00 	call	0xa0	; 0xa0 <pattern1_blink>
		pattern3_blink();
 262:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <pattern3_blink>
		pattern2();
 266:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pattern2>
 26a:	f9 cf       	rjmp	.-14     	; 0x25e <main+0x4>

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
