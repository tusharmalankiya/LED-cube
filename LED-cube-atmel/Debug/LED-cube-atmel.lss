
LED-cube-atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d3a  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  00000fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000733  00000000  00000000  00001699  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dc  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e3  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000295f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 94 00 	call	0x128	; 0x128 <main>
  7a:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <reset_pins>:
#include "atmega32.h"

void reset_pins(void){
	//set layer pins off
	LAYER_PORT = 0b00000000;
  82:	1b ba       	out	0x1b, r1	; 27
	
	//set column pins on
	COLUMN_PORT = 0b11111111;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	88 bb       	out	0x18, r24	; 24
	ColUMN_LAST_PIN_PORT = 0b00000001;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	08 95       	ret

0000008e <initLEDs>:
	
}

// Function to initialize the LED cube pins
void initLEDs(void) {
	LAYER_DDR = LAYER_MASK; // Set layer pins as output
  8e:	87 e0       	ldi	r24, 0x07	; 7
  90:	8a bb       	out	0x1a, r24	; 26
	
	COLUMN_DDR = COLUMN_MASK; // Set column pins as output
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	ColUMN_LAST_PIN_DDR = COLUMN_LAST_PIN_MASK; // set 9th column pin as output
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	84 bb       	out	0x14, r24	; 20
	
	reset_pins();
  9a:	0e 94 41 00 	call	0x82	; 0x82 <reset_pins>
  9e:	08 95       	ret

000000a0 <pattern2_blink>:
			COLUMN_PORT = patterns3_blink[j][i];
			_delay_ms(200); // Adjust the delay as needed for brightness
		}
		_delay_ms(1); // Adjust the delay to control animation speed
	}
	reset_pins();
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	3b c0       	rjmp	.+118    	; 0x11c <pattern2_blink+0x7c>
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2b c0       	rjmp	.+86     	; 0x106 <pattern2_blink+0x66>
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	91 05       	cpc	r25, r1
  b4:	99 f4       	brne	.+38     	; 0xdc <pattern2_blink+0x3c>
  b6:	22 30       	cpi	r18, 0x02	; 2
  b8:	31 05       	cpc	r19, r1
  ba:	81 f4       	brne	.+32     	; 0xdc <pattern2_blink+0x3c>
  bc:	45 b3       	in	r20, 0x15	; 21
  be:	4e 7f       	andi	r20, 0xFE	; 254
  c0:	45 bb       	out	0x15, r20	; 21
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	51 ee       	ldi	r21, 0xE1	; 225
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	50 40       	sbci	r21, 0x00	; 0
  cc:	60 40       	sbci	r22, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <pattern2_blink+0x28>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <pattern2_blink+0x32>
  d2:	00 00       	nop
  d4:	45 b3       	in	r20, 0x15	; 21
  d6:	41 60       	ori	r20, 0x01	; 1
  d8:	45 bb       	out	0x15, r20	; 21
  da:	14 c0       	rjmp	.+40     	; 0x104 <pattern2_blink+0x64>
  dc:	f9 01       	movw	r30, r18
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	e2 0f       	add	r30, r18
  e4:	f3 1f       	adc	r31, r19
  e6:	e0 5a       	subi	r30, 0xA0	; 160
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	e8 0f       	add	r30, r24
  ec:	f9 1f       	adc	r31, r25
  ee:	40 81       	ld	r20, Z
  f0:	48 bb       	out	0x18, r20	; 24
  f2:	4f ef       	ldi	r20, 0xFF	; 255
  f4:	51 ee       	ldi	r21, 0xE1	; 225
  f6:	64 e0       	ldi	r22, 0x04	; 4
  f8:	41 50       	subi	r20, 0x01	; 1
  fa:	50 40       	sbci	r21, 0x00	; 0
  fc:	60 40       	sbci	r22, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <pattern2_blink+0x58>
 100:	00 c0       	rjmp	.+0      	; 0x102 <pattern2_blink+0x62>
 102:	00 00       	nop
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	91 05       	cpc	r25, r1
 10a:	94 f2       	brlt	.-92     	; 0xb0 <pattern2_blink+0x10>
 10c:	8f e9       	ldi	r24, 0x9F	; 159
 10e:	9f e0       	ldi	r25, 0x0F	; 15
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <pattern2_blink+0x70>
 114:	00 c0       	rjmp	.+0      	; 0x116 <pattern2_blink+0x76>
 116:	00 00       	nop
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	23 30       	cpi	r18, 0x03	; 3
 11e:	31 05       	cpc	r19, r1
 120:	14 f2       	brlt	.-124    	; 0xa6 <pattern2_blink+0x6>
 122:	0e 94 41 00 	call	0x82	; 0x82 <reset_pins>
 126:	08 95       	ret

00000128 <main>:
//#include <string.h>



int main(void) {
	initLEDs(); // Initialize LED pins
 128:	0e 94 47 00 	call	0x8e	; 0x8e <initLEDs>
		//USART_transmition_string(str);
		
		// Display each layer in sequence to create animation
		//pattern1_blink();
		//pattern3_blink();
		pattern2_blink();
 12c:	0e 94 50 00 	call	0xa0	; 0xa0 <pattern2_blink>
 130:	fd cf       	rjmp	.-6      	; 0x12c <main+0x4>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
